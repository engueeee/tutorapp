generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String 
  firstName String   
  lastName  String   
  role      String   @default("tutor")
  phoneNumber String? // Phone number for contact
  profilePhoto String? // URL to profile photo
  onboardingCompleted Boolean @default(false) // Track if onboarding is completed
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  courses   Course[] // ðŸ‘ˆ relation inverse
  students  Student[] @relation("TutorStudents") // Students created by this tutor
  studentAccount Student? @relation("UserStudentAccount") // Student account linked to this user (for self-registered students)
  lessons   Lesson[]
}

model Course {
  id          String   @id @default(cuid())
  title       String
  description String?

  tutor       User     @relation(fields: [tutorId], references: [id])
  tutorId     String
  
  createdAt   DateTime @default(now())
  lessons     Lesson[]  
  courseStudents CourseStudent[]
}

model Student {
  id        String   @id @default(cuid())
  firstName String   
  lastName  String   
  age       Int?
  contact   String?
  grade     String?
  email     String?  @unique // Email for linking with user accounts
  phoneNumber String? // Phone number for contact
  profilePhoto String? // URL to profile photo
  lastActivity DateTime? // Track when student was last active
  onboardingCompleted Boolean @default(false) // Track if onboarding is completed
  hourlyRate Decimal? @db.Decimal(10,2) // Hourly rate for this student (per tutor)
  createdAt DateTime @default(now())

  tutor     User?    @relation("TutorStudents", fields: [tutorId], references: [id]) // Optional - for tutor-created students
  tutorId   String?
  
  user      User?    @relation("UserStudentAccount", fields: [userId], references: [id]) // Optional - for self-registered students
  userId    String?  @unique
  
  lessons   Lesson[]
  courseStudents CourseStudent[]
  lessonStudents LessonStudent[]
}

model Lesson {
  id          String   @id @default(cuid())
  date        String
  title       String
  description String?
  
  startTime   String
  duration    String
  zoomLink    String?
  subject     String?

  createdAt   DateTime @default(now())

  tutor       User     @relation(fields: [tutorId], references: [id])
  tutorId     String

  course      Course   @relation(fields: [courseId], references: [id])
  courseId    String

  student     Student  @relation(fields: [studentId], references: [id])
  studentId   String
  
  // New relationship for multiple students
  lessonStudents LessonStudent[]
}

model LessonStudent {
  lessonId String
  studentId String

  lesson Lesson @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([lessonId, studentId])
}

model CourseStudent {
  courseId String
  studentId String

  course Course @relation(fields: [courseId], references: [id])
  student Student @relation(fields: [studentId], references: [id])

  @@id([courseId, studentId])
}

