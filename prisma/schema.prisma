generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  String    @id @default(cuid())
  email               String    @unique
  password            String
  role                String    @default("tutor")
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  firstName           String
  lastName            String
  onboardingCompleted Boolean   @default(false)
  phoneNumber         String?
  profilePhoto        String?   @db.Text
  bio                 String?
  education           String?
  experience          String?
  subjects            String[]
  courses             Course[]
  lessons             Lesson[]
  students            Student[] @relation("TutorStudents")
  studentAccount      Student?  @relation("UserStudentAccount")
}

model Course {
  id             String          @id @default(cuid())
  title          String
  description    String?
  tutorId        String
  createdAt      DateTime        @default(now())
  zoomLink       String?
  tutor          User            @relation(fields: [tutorId], references: [id])
  courseStudents CourseStudent[]
  lessons        Lesson[]
}

model Student {
  id                  String          @id @default(cuid())
  firstName           String
  lastName            String
  age                 Int?
  contact             String?
  grade               String?
  createdAt           DateTime        @default(now())
  tutorId             String?
  email               String?         @unique
  userId              String?         @unique
  onboardingCompleted Boolean         @default(false)
  phoneNumber         String?
  profilePhoto        String?         @db.Text
  hourlyRate          Decimal?        @db.Decimal(10, 2)
  lastActivity        DateTime?
  courseStudents      CourseStudent[]
  lessons             Lesson[]
  lessonStudents      LessonStudent[]
  tutor               User?           @relation("TutorStudents", fields: [tutorId], references: [id])
  user                User?           @relation("UserStudentAccount", fields: [userId], references: [id])
}

model Lesson {
  id             String          @id @default(cuid())
  date           String
  startTime      String
  duration       String
  zoomLink       String?
  subject        String?
  createdAt      DateTime        @default(now())
  tutorId        String
  studentId      String
  description    String?
  title          String
  courseId       String
  tutorComment   String?
  course         Course          @relation(fields: [courseId], references: [id])
  student        Student         @relation(fields: [studentId], references: [id])
  tutor          User            @relation(fields: [tutorId], references: [id])
  lessonStudents LessonStudent[]
}

model LessonStudent {
  lessonId  String
  studentId String
  lesson    Lesson  @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  student   Student @relation(fields: [studentId], references: [id], onDelete: Cascade)

  @@id([lessonId, studentId])
}

model CourseStudent {
  courseId  String
  studentId String
  course    Course  @relation(fields: [courseId], references: [id])
  student   Student @relation(fields: [studentId], references: [id])

  @@id([courseId, studentId])
}
